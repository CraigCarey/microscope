Packages

    Meteor uses five basic types of packages:

    The Meteor core itself is split into different Meteor platform packages. They are included with every Meteor app, and you will pretty much never need to worry about these.
    Regular Meteor packages are known as “isopacks”, or isomorphic packages (meaning they can work both on client and server). First-party packages such as accounts-ui or appcache are maintained by the Meteor core team and come bundled with Meteor.
    Third-party packages are just isopacks developed by other users that have been uploaded to Meteor's package server. You can browse them on Atmosphere or with the meteor search command.
    Local packages are custom packages you can create yourself and put in the /packages directory.
    NPM packages (Node.js Packaged Modules) are Node.js packages. Although they don't work out of the box with Meteor, they can be used by the previous types of packages.

Structure

    Code in the /server directory only runs on the server.
    Code in the /client directory only runs on the client.
    Everything else runs in both contexts
    Your static assets (fonts, images, etc.) go in the /public directory.

    Files in /lib are loaded before anything else.
    Any main.* file is loaded after everything else.
    Everything else loads in alphabetical order based on the file name.

    Meteor is great at finding files. No matter where you put your code in the /client directory, Meteor will find it and compile it properly. This means you never need to manually write include paths for JavaScript or CSS files.

Spacebars
    Meteor's templating system. Spacebars is simply HTML, with the addition of three things: inclusions (also sometimes known as “partials”), expressions and block helpers.

    Inclusions use the {{> templateName}} syntax, and simply tell Meteor to replace the inclusion with the template of the same name (in our case postItem).

    Expressions such as {{title}} either call a property of the current object, or the return value of a template helper as defined in the current template's manager (more on this later).

    Finally, block helpers are special tags that control the flow of the template, such as {{#each}}…{{/each}} or {{#if}}…{{/if}}.

Collections
    A collection is a special data structure that takes care of storing your data in the permanent, server-side MongoDB database, and then synchronising it with each connected user's browser in real-time.
    Collections are pretty central to any app, so to make sure they are always defined first we'll put them inside the lib directory.

    Code inside folders that are not client/ or server/ will run in both contexts. So collections in the lib folder are available to both client and server. However, what the collection does in each environment can be pretty different.

    On the server, the collection has the job of talking to the MongoDB database, and reading and writing any changes. In this sense, it can be compared to a standard database library.

    On the client however, the collection is a copy of a subset of the real, canonical collection. The client-side collection is constantly and (mostly) transparently kept up to date with that subset in real-time.

Var
    In Meteor, the var keyword limits the scope of an object to the current file. When we want to make a collection available to our whole app omit the var keyword.

Data storage
    Web apps have three basic ways of storing data at their disposal, each filling a different role:

    browser memory: things like JavaScript variables are stored in the browser's memory, which means they're not permanent: they're local to the current browser tab, and will disappear as soon as you close it.
    browser storage: browsers can also store data more permanently using cookies or Local Storage. Although this data will persist from session to session, it's local to the current user (but available across tabs) and can't be easily shared with other users.
    server-side database: the best place for permanent data that you also want to make available to more than one user is in a good old database (MongoDB being the default solution for Meteor apps).

    the database should remain the “canonical“ data source that contains the master copy of your data.

meteor reset
    erases your database and resets your project. The reset command completely clears out the Mongo database

Find & Fetch

    Posts.find();       Posts.findOne();        Posts.find().fetch();

    In Meteor, find() returns a cursor, which is a reactive data source. When we want to log its contents, we can then use fetch() on that cursor to transform it into an array .

    Within an app, Meteor is smart enough to know how to iterate over cursors without having to explicitly convert them into arrays first. This is why you won't see fetch() that often in actual Meteor code

The Session
    A global reactive data store. It's global in the sense of a global singleton object: there's one session, and it's accessible everywhere. Global variables are usually seen as a bad thing, but in this case the session can be used as a central communication bus for different parts of the application.
    The Session object is not shared between users, or even between browser tabs.
    Session.set('pageTitle', 'A different title');
    Session.get('pageTitle');

Computations
    A computation is a block of code that runs every time one of the reactive data sources it depends on changes.
    If you have a reactive data source (for example, a Session variable) and would like to respond reactively to it, you'll need to set up a computation for it
    Note that you usually don't need to do this explicitly because Meteor already gives each template and helper it renders its own special computation (meaning that you can be sure your templates will reactively reflect their source data).
    Every reactive data source tracks all the computations that are using it so that it can let them know when its own value changes. To do so, it calls the invalidate() function on the computation.

    We can use the Tracker.autorun function to enclose a block of code in a computation and make it reactive:

    Meteor.startup(function() {
      Tracker.autorun(function() {
        console.log('There are ' + Posts.find().count() + ' posts');
      });
    });

    Note that we need to wrap the Tracker block inside a Meteor.startup() block to ensure that it only runs once Meteor has finished loading the Posts collection.
    Behind the scenes, autorun then creates a computation, and wires it up to re-evaluate whenever the data sources it depends on change.
    Since Posts.find() is a reactive data source, it will take care of telling the computation to re-evaluate every time the number of posts changes.
