Packages

    Meteor uses five basic types of packages:

    The Meteor core itself is split into different Meteor platform packages. They are included with every Meteor app, and you will pretty much never need to worry about these.
    Regular Meteor packages are known as “isopacks”, or isomorphic packages (meaning they can work both on client and server). First-party packages such as accounts-ui or appcache are maintained by the Meteor core team and come bundled with Meteor.
    Third-party packages are just isopacks developed by other users that have been uploaded to Meteor's package server. You can browse them on Atmosphere or with the meteor search command.
    Local packages are custom packages you can create yourself and put in the /packages directory.
    NPM packages (Node.js Packaged Modules) are Node.js packages. Although they don't work out of the box with Meteor, they can be used by the previous types of packages.

Structure

    Code in the /server directory only runs on the server.
    Code in the /client directory only runs on the client.
    Everything else runs on both the client and server.
    Your static assets (fonts, images, etc.) go in the /public directory.

    Files in /lib are loaded before anything else.
    Any main.* file is loaded after everything else.
    Everything else loads in alphabetical order based on the file name.

    Meteor is great at finding files. No matter where you put your code in the /client directory, Meteor will find it and compile it properly. This means you never need to manually write include paths for JavaScript or CSS files.

Spacebars
    Meteor's templating system. Spacebars is simply HTML, with the addition of three things: inclusions (also sometimes known as “partials”), expressions and block helpers.

    Inclusions use the {{> templateName}} syntax, and simply tell Meteor to replace the inclusion with the template of the same name (in our case postItem).

    Expressions such as {{title}} either call a property of the current object, or the return value of a template helper as defined in the current template's manager (more on this later).

    Finally, block helpers are special tags that control the flow of the template, such as {{#each}}…{{/each}} or {{#if}}…{{/if}}.